<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer_science - Jan Meppe</title>
    <link>https://www.janmeppe.com/notes/computer_science/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.janmeppe.com/notes/computer_science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making anagrams solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/anagrams_solution/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/anagrams_solution/</guid>
      <description>Problem Statement Link to problem statement
Lessons learned  Use python built-in libraries like collections.Counter (very useful tool) Brute force a problem on paper first with a small example  Solution def makeAnagram(a, b): from collections import Counter counter_a = Counter(a) counter_b = Counter(b) counter_a.subtract(counter_b) return sum(abs(i) for i in counter_a.values()) </description>
    </item>
    
    <item>
      <title>Number line jumps solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/number_line_jumps_solution/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/number_line_jumps_solution/</guid>
      <description>Problem statement Link to problem
Lessons learned  Set up equations and solve by hand Brute-force solutio and then think of edge cases  Solution # Complete the kangaroo function below. def kangaroo(x1, v1, x2, v2): if (x1-x2&amp;lt;0) and (v1-v2&amp;lt;0): return &amp;#34;NO&amp;#34; k = (x2-x1)/(v2-v1) if k.is_integer(): return &amp;#34;YES&amp;#34; else: return &amp;#34;NO&amp;#34; Note: Fails on test case 10.</description>
    </item>
    
    <item>
      <title>Counting valleys solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/counting_valleys/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/counting_valleys/</guid>
      <description>Problem link
An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly steps, for every step it was noted if it was an uphill, , or a downhill, step. Hikes always start and end at sea level, and each step up or down represents a unit change in altitude. We define the following terms:
A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.</description>
    </item>
    
    <item>
      <title>Sales by Match solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/random_note_solution/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/random_note_solution/</guid>
      <description>Problem link
There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.
Example
There is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .
Function Description
Complete the sockMerchant function in the editor below.</description>
    </item>
    
    <item>
      <title>Sales by Match solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/sales_by_match/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/sales_by_match/</guid>
      <description>Problem link
There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.
Example
There is one pair of color and one of color . There are three odd socks left, one of each color. The number of pairs is .
Function Description
Complete the sockMerchant function in the editor below.</description>
    </item>
    
    <item>
      <title>2D array hourglass solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/2d_array_hourglass/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/2d_array_hourglass/</guid>
      <description>Problem pdf
Solution #!/bin/python3 import math import os import random import re import sys # Complete the hourglassSum function below. def hourglassSum(arr): count = -63 for i in range(4): for j in range(4): hourglass_sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2] if hourglass_sum &amp;gt; count: count = hourglass_sum return count if __name__ == &amp;#39;__main__&amp;#39;: fptr = open(os.environ[&amp;#39;OUTPUT_PATH&amp;#39;], &amp;#39;w&amp;#39;) arr = [] for _ in range(6): arr.</description>
    </item>
    
    <item>
      <title>Arrays: Left Rotation solution</title>
      <link>https://www.janmeppe.com/notes/computer_science/hackerrank/ctci-array-left-rotation-english/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/hackerrank/ctci-array-left-rotation-english/</guid>
      <description>Problem pdf
See this link on how to link to static files in Hugo.
Solution #!/bin/python3 import math import os import random import re import sys # Complete the rotLeft function below. def rotLeft(a, d): for i in range(d): a.append(a.pop(0)) return a if __name__ == &amp;#39;__main__&amp;#39;: fptr = open(os.environ[&amp;#39;OUTPUT_PATH&amp;#39;], &amp;#39;w&amp;#39;) nd = input().split() n = int(nd[0]) d = int(nd[1]) a = list(map(int, input().rstrip().split())) result = rotLeft(a, d) fptr.write(&amp;#39; &amp;#39;.join(map(str, result))) fptr.</description>
    </item>
    
    <item>
      <title>Quicksort</title>
      <link>https://www.janmeppe.com/notes/computer_science/algorithms/quicksort/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.janmeppe.com/notes/computer_science/algorithms/quicksort/</guid>
      <description>Quicksort Implementation of the quicksort algorithm. This divide and conquer algorithm works by splitting up the problem by:
 Splitting up the problem in a base case (empty or element 1) Subdividing the problem until you end up in one of the base cases  Solution is not optimal, construction of lesser and greater could be done in place I believe.
def quicksort(arr): # base case [] or [.] if len(arr) &amp;lt; 2: return arr # otherwise choose pivot and recurse pivot = arr[0] lesser = [i for i in arr[1:] if i &amp;lt;= pivot] greater = [i for i in arr[1:] if i &amp;gt;= pivot] return quicksort(lesser) + [pivot] + quicksort(greater) quicksort([1, 2, 1, 0, 1, 2, 3, 4]) [0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4]  </description>
    </item>
    
  </channel>
</rss>